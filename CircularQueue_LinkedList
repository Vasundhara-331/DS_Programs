#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
};

struct node *queueFront = NULL;
struct node *queueRear = NULL;

void enqueue(int data) {
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    if (queueFront == NULL) {
        queueFront = newNode;
        queueRear = newNode;
        newNode->link = queueFront; 
    } else {
        queueRear->link = newNode;  
        queueRear = newNode;        
        queueRear->link = queueFront; 
    }
    printf("\n%d has been enqueued to queue", data);
}

void dequeue() {
    if (queueFront == NULL) {
        printf("\nQueue is empty!");
        return;
    }
    
    struct node *temp = queueFront;
    if (queueFront == queueRear) {
        // Only one element in the queue
        queueFront = NULL;
        queueRear = NULL;
    } else {
        queueFront = queueFront->link;  
        queueRear->link = queueFront;   
    }
    printf("\n%d has been dequeued", temp->data);
    free(temp);
}

void displayCQueue() {
    if (queueFront == NULL) {
        printf("\nQueue is empty!");
        return;
    }
    struct node *temp = queueFront;
    printf("\nQueue elements: ");
    do {
        printf("%d\t", temp->data);
        temp = temp->link;
    } while (temp != queueFront);  
    printf("\n");
}

int main() {
    int choice, data;
    while (1) {
        printf("\nDisplaying Circular Queue Menu:");
        printf("\n1. Enqueue to Queue");
        printf("\n2. Dequeue from Queue");
        printf("\n3. Display Queue");
        printf("\n4. Exit");
        
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("\nEnter the item to be enqueued: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                displayCQueue();
                break;
            case 4:
                printf("\nExiting Circular Queue Menu!");
                exit(0);
            default:
                printf("\nInvalid choice!\n");
        }
    }
    return 0;
}

/* OUTPUT:
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 1

1 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 2

2 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 3

3 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 4

4 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 5

5 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 3

Queue elements: 1       2       3       4       5

Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

1 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

2 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 6

6 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 1

Enter the item to be enqueued: 7

7 has been enqueued to queue
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 3

Queue elements: 3       4       5       6       7

Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

3 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

4 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

5 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

6 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

7 has been dequeued
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 2

Queue is empty!
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 3

Queue is empty!
Displaying Circular Queue Menu:
1. Enqueue to Queue
2. Dequeue from Queue
3. Display Queue
4. Exit
Enter your choice: 4

Exiting Circular Queue Menu!
*/
