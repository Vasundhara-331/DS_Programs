# include <stdio.h>
# include <stdlib.h>
# define MAX 100
int adj[MAX][MAX];
int visited[MAX],queue[MAX];
int front = -1, rear = -1;

void enqueue(int vertex) {
  if(rear == MAX -1) {
    printf("\nOverflow!");
    return;
  }
  if(front == -1) {
    front = 0;
  }
  queue[++rear] = vertex;
}

int dequeue() {
  if(front == -1 && front >= rear) {
    printf("\nQueue Overflow!");
    return -1;
  }
  else {
    return queue[front++];
  }
}

void bfs(int startVertex, int n) {
  int i;
  enqueue(startVertex);
  visited[startVertex] = 1;
  printf("\nBFS Traversal: \t");
  
  while(front <= rear) {
    int currentVertex = dequeue();
    printf("%d\t", currentVertex);
    for(i=0;i<n;i++) {
     if(adj[currentVertex][i] = 1 && visited[i] == 0) {
       enqueue(i);
       visited[i] = 1;
     }
   }
 }
 printf("\n");
}

int main() {
  int i,j,n,startVertex;
  int a,e;
  printf("\nEnter the number of vertices: ");
  scanf("%d",&n);
  
  for(i=0;i<n;i++) {
    for(j=0;j<n;j++) {
      adj[i][j] = 0;
    }
  } 
  
  printf("\nEnter the Adjacency Matrix:\n ");
  for(i=0;i<n;i++) {
    printf("Enter the number of edge from %d: ",i);
    scanf("%d",&e);
    for(j=0;j<e;j++) {
      printf("Enter edge: ");
      scanf("%d",&a);
      adj[i][a] = 1;
    }
  }
    
  printf("\nDisplaying the Adjacency Matrix:\n"); 
  for(i=0;i<n;i++) {
    for(j=0;j<n;j++) {
      printf("%d\t  ",adj[i][j]);
    }
    printf("\n");
  }
  printf("\nEnter starting vertex: ");
  scanf("%d",&startVertex);
  
  for(i=0;i<MAX;i++) {
    visited[i] = 0;
  }
  bfs(startVertex,n);
  return 0;
}
 
OUTPUT:
Enter the number of vertices: 6

Enter the Adjacency Matrix:
Enter the number of edge from 0: 1
Enter edge: 1
Enter the number of edge from 1: 2
Enter edge: 2
Enter edge: 3
Enter the number of edge from 2: 2
Enter edge: 1
Enter edge: 4
Enter the number of edge from 3: 2
Enter edge: 1
Enter edge: 4
Enter the number of edge from 4: 3
Enter edge: 2
Enter edge: 3
Enter edge: 5
Enter the number of edge from 5: 1
Enter edge: 4

Displaying the Adjacency Matrix:
0	  1	  0	  0	  0	  0	  
0	  0	  1	  1	  0	  0	  
0	  1	  0	  0	  1	  0	  
0	  1	  0	  0	  1	  0	  
0	  0	  1	  1	  0	  1	  
0	  0	  0	  0	  1	  0	  

Enter starting vertex: 0

BFS Traversal: 	0	1	2	3	4	5
