#include <stdio.h>
#include <stdlib.h>

// Define a node in the circular linked list
struct node {
    int data;            // Data stored in the node
    struct node* link;   // Pointer to the next node
};

// Function to insert a new node in sorted order in a circular linked list
void insertInSortedOrder(struct node** head, int data) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;

    if (*head == NULL) { // If the list is empty
        *head = newNode; // Set head to new node
        newNode->link = newNode; // Link to itself
    } else {
        struct node* current = *head;
        struct node* prev = NULL;

        // Traverse to find the correct position for the new node
        do {
            if (current->data >= data) { // Found the position
                break;
            }
            prev = current;
            current = current->link;
        } while (current != *head);

        // Inserting the new node at the beginning
        if (prev == NULL) { // New node is the smallest element
            newNode->link = *head;
            while (current->link != *head) {
                current = current->link; // Traverse to the last node
            }
            current->link = newNode; // Link last node to new node
            *head = newNode; // Update head to new node
        } else {
            // Insert in between or at the end
            prev->link = newNode;
            newNode->link = current; // Link new node to the next node
        }
    }
}

// Function to display the circular linked list
void traverse(struct node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct node* temp = head; // Start from head
    printf("Circular Linked List: ");
    do {
        printf("%d ", temp->data); // Print current node data
        temp = temp->link; // Move to the next node
    } while (temp != head); // Loop until we reach head again
    printf("\n");
}

// Function to merge two circular linked lists
struct node* mergeCircularLists(struct node* head1, struct node* head2) {
    if (head1 == NULL) return head2; // If first list is empty, return second
    if (head2 == NULL) return head1; // If second list is empty, return first

    struct node* temp1 = head1; // Start from first list
    struct node* temp2 = head2; // Start from second list

    // Traverse to the last node of the first list
    while (temp1->link != head1) {
        temp1 = temp1->link;
    }

    // Connect last of the first list to the head of the second list
    temp1->link = head2;

    // Traverse to the last node of the second list
    while (temp2->link != head2) {
        temp2 = temp2->link;
    }

    // Connect last node of second list to head of the first list
    temp2->link = head1;

    return head1; // Return the merged list
}

int main() {
    struct node* head1 = NULL; // Head of the first circular linked list
    struct node* head2 = NULL; // Head of the second circular linked list
    int data;

    // Insert nodes into the first circular linked list
    printf("Creating First Circular Linked List:\n");
    while (1) {
        printf("Enter data to insert in sorted order (or -1 to stop): ");
        scanf("%d", &data);
        if (data == -1) break; // Stop input
        insertInSortedOrder(&head1, data); // Insert data in sorted order
    }

    // Insert nodes into the second circular linked list
    printf("\nCreating Second Circular Linked List:\n");
    while (1) {
        printf("Enter data to insert in sorted order (or -1 to stop): ");
        scanf("%d", &data);
        if (data == -1) break; // Stop input
        insertInSortedOrder(&head2, data); // Insert data in sorted order
    }

    // Display both circular linked lists
    printf("\nFirst Circular Linked List:\n");
    traverse(head1);
    printf("\nSecond Circular Linked List:\n");
    traverse(head2);

    // Merge the two circular linked lists
    head1 = mergeCircularLists(head1, head2);
    printf("\nMerged Circular Linked List:\n");
    traverse(head1);

    return 0;
}
