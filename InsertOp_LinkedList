#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};
struct node* head = NULL;

void traverse() {
    struct node* ptr = head;
    
    if (ptr == NULL) {
        printf("The list is empty!\n");
        return;
    }

    printf("Linked List: ");
    while (ptr != NULL) {
        printf("%d\t", ptr->data);  // Print the data in the linked list nodes
        ptr = ptr->link;            // Move to the next node
    }
    printf("\n");
}

void insert(int data) {
    struct node* newNode = (struct node*) malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("\nMemory Allocation not possible!\n");
        return;
    }

    newNode->data = data;  // Set the data
    newNode->link = head;  // Link the new node to the current head
    head = newNode;        // Update head to point to the new node
}

void insertAtBeginning(int data) {
    struct node* newNode = (struct node*) malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("\nMemory Allocation not possible!\n");
        return;
    }

    newNode->data = data;   // Set the data
    newNode->link = head;   // Link the new node to the current head
    head = newNode;         // Update head to point to the new node

    printf("Node inserted at the beginning.\n");
}
    
void insertAtEnd(int data) {
    struct node* newNode = (struct node*) malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("\nMemory Allocation not possible!\n");
        return;
    }

    newNode->data = data;   // Set the data
    newNode->link = NULL;   // The new node will point to NULL, as it will be the last node

    if (head == NULL) {
        // If the list is empty, make the new node the head
        head = newNode;
    } else {
        // Traverse to the end of the list and insert the new node
        struct node* ptr = head;
        while (ptr->link != NULL) {
            ptr = ptr->link;
        }
        ptr->link = newNode;  // Link the last node to the new node
    }

    printf("Node inserted at the end.\n");
}
void insertInBetween(int data, int key) {
   struct node* newNode = (struct node*) malloc(sizeof(struct node));
    if (newNode == NULL) {
        printf("\nMemory Allocation not possible!\n");
        return;
    }

    newNode->data = data;  // Set data for the new node

    // Traverse the list to find the node with the specified key
    struct node* ptr = head;
    while (ptr != NULL && ptr->data != key) {
        ptr = ptr->link;
    }

    // If key is found, insert the new node after the key node
    if (ptr != NULL) {
        newNode->link = ptr->link;  // Set new node to point to the next node
        ptr->link = newNode;        // Link the current node to the new node
        printf("Node inserted after the key %d.\n", key);
    } else {
        printf("Key %d not found in the list.\n", key);
        free(newNode);  // Free the memory if key is not found
    }
}
int main() {
    int data,ch,key;
    char choice;

    do {
        printf("\nEnter the data: ");
        scanf("%d", &data);

        insert(data);  // Insert new data into the linked list
        traverse();    // Display the current linked list

        printf("\nDo you want to add another node (y/n)? ");
        scanf(" %c", &choice);
    } while (choice == 'y' || choice == 'Y');
    while(1) {
        printf("\nMenu:");
        printf("\n1. Insert at beginning\n2. Insert at end\n3. Insert in between\n4. Display\n5. Exit");
        printf("\nEnter the choice: ");
        scanf("%d",&ch);
        switch(ch) {
            case 1: {
                printf("\nEnter the data to be inserted: ");
                scanf("%d",&data);
                insertAtBeginning(data);
                break;
            }
            case 2: {
                printf("\nEnter the data to be inserted: ");
                scanf("%d",&data);
                insertAtEnd(data);
                break;
            }
            case 3: {
                printf("\nEnter the data to be inserted: ");
                scanf("%d",&data);
                printf("\nEnter the key value:");
                scanf("%d",&key);
                insertInBetween(data,key);
                break;
            }
            case 4: {
                traverse();
                break;
            }
            case 5: {
                printf("\nExiting Menu!");
                exit(0);
            }
            default: {
                printf("\nInvalid Choice!");
            }
        }
    }
    return 0;
}
