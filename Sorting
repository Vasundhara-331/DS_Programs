#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

void swap(int* a, int* b) 
{
	int temp = *a;
	*a = *b;
	*b = temp;
}

int partition(int arr[], int low, int high) 
{
	int pivot = arr[high];
	int i = (low - 1);

	for (int j = low; j < high; j++) 
	{
		if (arr[j] < pivot) 
		{
			i++;
			swap(&arr[i], &arr[j]);
		}
	}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}

void quickSort(int arr[], int low, int high) 
{
	if (low < high) 
	{
		int pi = partition(arr, low, high);
		quickSort(arr, low, pi - 1);
		quickSort(arr, pi + 1, high);
	}
}


void merge(int arr[], int l, int m, int r) 
{
	int n1 = m - l + 1;
	int n2 = r - m;
	int L[n1], R[n2];

	for (int i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (int j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	int i = 0, j = 0, k = l;
	while (i < n1 && j < n2) 
	{
		if (L[i] <= R[j]) 
		{
			arr[k] = L[i];
			i++;
		} else 
		{
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	while (i < n1) 
	{
		arr[k] = L[i];
		i++;
		k++;
	}

	while (j < n2) 
	{
		arr[k] = R[j];
		j++;
		k++;
	}
}

void mergeSort(int arr[], int l, int r) 
{
	if (l < r) 
	{
		int m = l + (r - l) / 2;
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);
		merge(arr, l, m, r);
	}
}


void heapify(int arr[], int n, int i) 
{
	int largest = i;
	int left = 2 * i + 1;
	int right = 2 * i + 2;

	if (left < n && arr[left] > arr[largest])
		largest = left;

	if (right < n && arr[right] > arr[largest])
		largest = right;

	if (largest != i) 
	{
		swap(&arr[i], &arr[largest]);
		heapify(arr, n, largest);
	}
}

void heapSort(int arr[], int n) 
{
	for (int i = n / 2 - 1; i >= 0; i--)
		heapify(arr, n, i);

	for (int i = n - 1; i > 0; i--) 
	{
		swap(&arr[0], &arr[i]);
		heapify(arr, i, 0);
	}
}


void printArray(int arr[], int size) 
{
	for (int i = 0; i < size; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}


void displayMenu() {
	printf("\nChoose Sorting Algorithm:\n");
	printf("1. Quick Sort\n");
	printf("2. Merge Sort\n");
	printf("3. Heap Sort\n");
	printf("4. Exit\n");
	printf("Enter your choice: ");
}

int main() 
{
	int arr[MAX_SIZE], n, choice;

	printf("Enter the number of elements : ");
	scanf("%d", &n);

	printf("Enter the elements of the array:\n");
	for (int i = 0; i < n; i++) 
	{
		scanf("%d", &arr[i]);
	}

	while (1) 
	{
		printf("\nMenu\n");
		printf("1. Quick Sort\n");
		printf("2. Merge Sort\n");
		printf("3. Heap Sort\n");
		printf("4. Exit\n");
		printf("Enter your choice: ");
		scanf("%d", &choice);

		int arrCopy[n];
		for (int i = 0; i < n; i++)
			arrCopy[i] = arr[i]; // Copy original array for each sort

		if (choice == 1) 
		{
			quickSort(arrCopy, 0, n - 1);
			printf("Array sorted with Quick Sort:\n");
			printArray(arrCopy, n);
		} 
		else if (choice == 2) 
		{
			mergeSort(arrCopy, 0, n - 1);
			printf("Array sorted with Merge Sort:\n");
			printArray(arrCopy, n);
		} 
		else if (choice == 3) 
		{
			heapSort(arrCopy, n);
			printf("Array sorted with Heap Sort:\n");
			printArray(arrCopy, n);
		} 
		else if (choice == 4) 
		{
			printf("Exiting program.\n");
			break;
		} 
		else 
		{
			printf("Invalid choice");
		}
	}

	return 0;
}
